import subprocess
def yum_configure() :
    print("\t\t YUM CONFIGURATION IS UNDER PROCESS ")
    yum_status=sp.getstatusoutput("yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm")
    if yum_status[0] == 0 :
        print("configured yum")
    else:
        print("error in configureation")
        exit()
        
def docker_locally() :
    print("\t\tWELCOME TO DOCKER SERVICES \n\n")
    present_docker=sp.getstatusoutput("docker --version")
    
    
    if (present_docker[0] != 0):
        print("docker service is not available ");
        print( " DOWNLOADING DOCKER SERVICES ")
        s=download_docker=sp.getstatusoutput("yum install docker-ce --nobest")
        if(s[0] == 0):
            print("successfullly installed docker")
        else:
            print(s[1])
            exit()
    status_docker=sp.getstatusoutput("systemctl is-active docker.services")
    if(status_docker[1] == 'inactive'):
        s=input(" do u want to start docker : ")
        if ('yes' in s) or ('start' in s) :
            sp.getstatusoutput("systemctl start docker.services")
        else:
            exit()
    print("do u want to run an instance in docker ")
    checker=input("enter your choice")
    
    if("yes" in checker):
        cmd=""
        enter=input("Enter os name and tag")
        if ("centos" in enter):
            sp.getstatusoutput("docker run -it centos:latest")
        elif ("fedora" in enter):
            sp.getstatusoutput("docker run -it fedora:latest")
        else:
            print("{} is not available ".format(enter))
            print("pulling image from docker hub")
            sp.getstatusoutput("docker pull {}".format(enter))
            sp.getstatusoutput("docker run -it {}".format(enter))

def lvmcreation() :
    print("welcome to partitioning ")
    print("u have free space ?")
    print("how many devices u have")

    n=int(input("Enter number : "))
    l=[]
    vg_pv=""
    p=n
    while(n > 0):
            name=input("Enter {}th name".format(n))
            l.append(name)
            vg_pv+=name+" ";
            n=n-1
    while (p > 0):
        status=sp.getstatusoutput("pvcreate {}".format(l[p-1]))
        if status[0] == 0 :
            print("successfully created {}".format(l[p-1]))
        else :
            print("Entered name is incorect : {}".format(l[p-1]))
            exit()
        p=p-1

    print("creating single volume group for all physical volume ")

    print("Enter name of volume group")
    vg_name=input()
    cmd="vgcreate {} {}".format(vg_name , vg_pv)
    vg_status=sp.getstatusoutput(cmd)
    if (vg_status[0] == 0):
        print("successfuly created volume group {}".format(vg_name))
    else :
        print("unable to create volume group with name : {}".format(vg_name))
        exit()

    while(1):
        lv_name=input("Enter name of logical volume : ")
        lv_size=input("Enter size of logicl volume in MiB : ")
        lv_status=sp.getstatusoutput("lvcreate --name {} --size {}M {}  ".format(lv_name ,lv_size , vg_name))
        if lv_status[0] == 0 :
            print("successfully created : {}".format(lv_name))
        else:
            print("unsuccess to create : {}".format(lv_name))
        print("if u dont want to create logical volume type 'exit' ")
        i=input()
        if "exit" in i:
            break;

def authentication() :
    print('enter your credential')
    name=input("Enter user name : ")
    passwd=input("Enter password : ")
    if (name == 'test') and (passwd == 'test'):
        return 989 ;
    else:
        return 0 ;

if authentication() == 989 :
    print("WELCOME TO automation world")
    while(1):
        print("enter your choice")
        userchoice = input() 
        if(('create' in userchoice) or ('make' in userchoice) ) :
            if ('lvm' in userchoice) :
                lvmcreation()

